
(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/FBs' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_ANALYSE_VOLTAGE
VAR_INPUT
	uliStartTimeNextLatch : ARRAY [0..1] OF UDINT;
	bWcState		: BOOL;
END_VAR
VAR_IN_OUT
	iVoltage : ARRAY [0..9] OF INT;
END_VAR
VAR
	iBufferV : ARRAY [0..209] OF INT;
	iBufferT : ARRAY [0..209] OF T_DCTIME;
	i: INT;
	dctActSample: T_DCTIME;
	multiplier: T_DCTIME;
	dctSampleDelay: T_DCTIME;
	fbGETCURTASKINDEX: GETCURTASKINDEX;
	tCylceTime: T_DCTIME;
	tSampleTime: T_DCTIME;
	dctElSampleDelta: T_DCTIME;
	n: INT;
	m: INT;
	dctZeroPoint: ARRAY [1..2] OF T_DCTIME;
	bZeroPoint: ARRAY [1..2] OF BOOL;
	ui64Sub: T_ULARGE_INTEGER;
	ui64a: T_ULARGE_INTEGER;
	ui64b: T_ULARGE_INTEGER;
	dctZeroPointDelta: T_DCTIME;
	dctNextSample: T_DCTIME;
	uliStartTimeNextLatchLastCycle: ARRAY [0..1] OF UDINT;
	iBufferZeroSumV: INT;
	dctSampleTimePerV: T_DCTIME;
	dctSampleTimeOffset: T_DCTIME;
	ui64Add: T_ULARGE_INTEGER;
	diResultAdd: DINT;
	diResultSub: DINT;
	ui64Add1: T_ULARGE_INTEGER;
	ui64Sub1: T_ULARGE_INTEGER;
	ui64Cmp1: T_ULARGE_INTEGER;
	iActVoltage: INT;
	tHalfCylceTime: T_DCTIME;
	multi: T_ULARGE_INTEGER;
END_VAR
VAR_OUTPUT
	lrFrequency: LREAL;
	tNextZeroVoltage: T_DCTIME;
	bError: BOOL;
	bZeroFound: BOOL;
	bZeroNow: BOOL;
END_VAR
VAR CONSTANT
	uiOversampling: UINT := 10;
END_VAR
(* @END_DECLARATION := '0' *)
MEMCPY(ADR(dctNextSample), ADR(uliStartTimeNextLatch), SIZEOF(dctActsample));
MEMCPY(ADR(ui64a), ADR(dctNextSample), SIZEOF(ui64a));
MEMCPY(ADR(ui64b), ADR(dctActSample), SIZEOF(ui64b));
ui64Sub := UInt64Sub64(ui64a, ui64b);
MEMCPY(ADR(dctElSampleDelta), ADR(ui64Sub), SIZEOF(dctElSampleDelta));

fbGETCURTASKINDEX(index=> );
tCylceTime.dwLowPart := SYSTEMTASKINFOARR[fbGETCURTASKINDEX.index].cycleTime*100;
tCylceTime.dwHighPart := 0;


IF (dctElSampleDelta.dwLowPart <> tCylceTime.dwLowPart) OR (dctElSampleDelta.dwHighPart <> tCylceTime.dwHighPart) THEN
	bError := TRUE;
ELSE
	bError := FALSE;
END_IF


IF NOT bWcState AND NOT bError THEN
	(* Samplezeit *)
	IF uiOversampling > 0 THEN
		tSampleTime.dwLowPart := (SYSTEMTASKINFOARR[fbGETCURTASKINDEX.index].cycleTime*100)/uiOversampling;
		tSampleTime.dwHighPart := 0;
	END_IF

	(* Spannungsspeicher befüllen *)
	FOR i := 10 TO 209 DO
		iBufferV[i-10] := iBufferV[i];
		iBufferT[i-10] := iBufferT[i];
	END_FOR

	FOR i := 200 TO 209 DO
		multiplier := LREAL_TO_UINT64(INT_TO_LREAL(i-200));
		dctSampleDelay := UInt64Mul64(tSampleTime, multiplier);
		iBufferT[i] := UInt64Add64(dctActSample, dctSampleDelay);
		iBufferV[i] := iVoltage[i-200];
	END_FOR

	(* Zeit der Nulldurchgänge bestimmen *)
	m := 208;
	bZeroPoint[1] := FALSE;
	bZeroPoint[2] := FALSE;
	bZeroNow := FALSE;
	iActVoltage := iBufferV[200];
	FOR n := 1 TO 2 DO
		FOR i := m TO 0 BY -1 DO
			IF (iBufferV[i].15 AND NOT iBufferV[i+1].15) OR (NOT iBufferV[i].15 AND iBufferV[i+1].15) THEN

				iBufferZeroSumV := ABS(iBufferV[i]) + ABS(iBufferV[i+1]);
				IF iBufferZeroSumV > 0 THEN
					dctSampleTimePerV.dwLowPart := LREAL_TO_DWORD(DWORD_TO_LREAL(tSampleTime.dwLowPart) / INT_TO_LREAL(iBufferZeroSumV));
					dctSampleTimePerV.dwHighPart := 0;
					dctSampleTimeOffset := UInt64Mul64(dctSampleTimePerV, LREAL_TO_UINT64(INT_TO_LREAL(ABS(iBufferV[i]))));
					dctZeroPoint[n] := UInt64Add64(iBufferT[i], dctSampleTimeOffset);
				ELSE
					dctZeroPoint[n] := iBufferT[i];
				END_IF


				m := i-1;

				bZeroPoint[n] := TRUE;
				IF n = 1 THEN
					multi.dwLowPart := 1;
					tHalfCylceTime.dwLowPart := tCylceTime.dwLowPart/2;
					ui64Add1 := UInt64Add64(UInt64Add64(dctZeroPoint[n],UInt64Mul64(dctZeroPointDelta, multi)), tHalfCylceTime);
					ui64Sub1 := UInt64Sub64(UInt64Add64(dctZeroPoint[n],UInt64Mul64(dctZeroPointDelta, multi)), tHalfCylceTime);
					ui64Cmp1 := F_GetActualDcTime();
					diResultAdd := UInt64Cmp64(ui64Cmp1, ui64Add1);
					diResultSub := UInt64Cmp64(ui64Cmp1, ui64Sub1);
					IF (diResultSub >= 0) AND (diResultAdd <= 0)THEN
						bZeroNow := TRUE;
					END_IF

				END_IF
				EXIT;
			END_IF
		END_FOR
	END_FOR
	IF bZeroPoint[1] AND bZeroPoint[2] THEN

		(* Berechnung des nächsten Nullpunkts *)
		MEMCPY(ADR(ui64a), ADR(dctZeroPoint[1]), SIZEOF(ui64a));
		MEMCPY(ADR(ui64b), ADR(dctZeroPoint[2]), SIZEOF(ui64b));
		ui64Sub := UInt64Sub64(ui64a, ui64b);
		MEMCPY(ADR(dctZeroPointDelta), ADR(ui64Sub), SIZEOF(dctZeroPointDelta));

		MEMCPY(ADR(ui64a), ADR(dctZeroPointDelta), SIZEOF(ui64a));
		MEMCPY(ADR(ui64b), ADR(dctZeroPoint), SIZEOF(ui64b));
		ui64Add := UInt64Add64(ui64a, ui64b);
		MEMCPY(ADR(tNextZeroVoltage), ADR(ui64Add), SIZEOF(tNextZeroVoltage));


		lrFrequency := 1/(2*DWORD_TO_LREAL(dctZeroPointDelta.dwLowPart)/1000000000);
	END_IF



END_IF
MEMCPY(ADR(dctActSample), ADR(uliStartTimeNextLatch), SIZEOF(dctActsample));

uliStartTimeNextLatchLastCycle := uliStartTimeNextLatch;
END_FUNCTION_BLOCK
