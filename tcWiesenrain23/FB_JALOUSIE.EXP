
(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/FBs' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
(* uses MAIN_SLOW.mSun .mRain .mWind .mAlarm .mDoor .mFire .mUtcDt .mUtcDate .LATITUDE .LONGITUDE *)
FUNCTION_BLOCK FB_Jalousie
VAR_INPUT
	up AT %I*: BOOL;
	down AT %I*: BOOL;
	force: BOOL;
	position: BYTE := 255;   (* 0 = closed, 255 = open *)
	angle: BYTE := 255;      (* 0 = closed, 255 = open *)
	windowDirection: REAL;   (* 0 = north, 90 = east, 180 = south, 270 = west *)
	upDownTime: TIME := t#33s;
	angleTime: TIME := t#1s;
	nightPosition: BYTE := 0;
	nightAngle: BYTE := 0;
	windowDepth: REAL := 55;
	windowWidth: REAL := 180;
	reset: BOOL := FALSE;
END_VAR
VAR_OUTPUT
	qUp AT %Q*: BOOL;
	qDown AT %Q*: BOOL;
	qStatus: BYTE;
	qPosition: BYTE;
	qAngle: BYTE;
END_VAR
VAR
	mShadeAngleOffset: REAL;
	mIsInitialized: BOOL := FALSE;
	viUp: BOOL;
	viDown: BOOL;
	viForce: BOOL;
	mInput: BLIND_INPUT;
	mControl: BLIND_CONTROL;
	mSecurity: BLIND_SECURITY;
	mNight: BLIND_NIGHT_FIXED;
	mSunTime: SUN_TIME;
	mShade: BLIND_SHADE;
END_VAR
(* @END_DECLARATION := '0' *)
IF NOT mIsInitialized OR reset THEN
	mSunTime.LATITUDE := MAIN_SLOW.LATITUDE;
	mSunTime.LONGITUDE := MAIN_SLOW.LONGITUDE;
	mControl.T_ANGLE := angleTime;
	mControl.T_UD := upDownTime;
	mShadeAngleOffset := DEG(PI / 2 - ATAN(windowDepth / windowWidth));
	mIsInitialized := TRUE;
END_IF

mInput(
	MASTER_MODE := TRUE,  (* const *)
	POS := mControl.POS,
	ANG := mControl.ANG,
	S1 := viUp XOR up,
	S2 := viDown XOR down,
	IN := viForce XOR force,
	PI := position,
	AI := angle,
);
(* TODO: mountains *)
(* use UTC, so we are independent of the DST *)
mSunTime(
	UTC := MAIN_SLOW.mUtcDate,
);
(* BUG: das setzen von 'night' funktioniert nur vor mitternacht - wenn der FB
   nach mitternacht initialisiert wird, dann bleibt es 'tag'. *)

(* use UTC, so we are independent of the DST - and this needs to be the same as  *)
mNight(
	NIGHT_ANGLE := nightAngle,   (* const *)
	NIGHT_POSITION := nightPosition,   (* const *)
	UP := mInput.QU,
	DN := mInput.QD,
	S_IN := mInput.STATUS,
	PI := mInput.PO,
	AI := mInput.AO,
	DTIN := MAIN_SLOW.mUtcDT,
	SUNRISE := mSunTime.SUN_RISE,
	SUNSET := mSunTime.SUN_SET,
);
mShade(
	UP := mNight.QU,
	DN := mNight.QD,
	S_IN := mNight.STATUS,
	PI := mNight.PO,
	AI := mNight.AO,
	ENABLE := TRUE,
	SUN := MAIN_SLOW.mSun,
	CX := MAIN_SLOW.mCalendar,   (* in/out *)

	Slat_spacing := 60,   (* const *)
	slat_width := 75,   (* const *)
	direction := windowDirection,   (* const *)
	angle_offset := mShadeAngleOffset, (* const *)
);
mSecurity(
	UP := mShade.QU,
	DN := mShade.QD,
	S_IN := mShade.STATUS,
	PI := mShade.PO,
	AI := mShade.AO,
	FIRE := MAIN_SLOW.mFire,
	WIND := MAIN_SLOW.mWind,
	ALARM := MAIN_SLOW.mAlarm,
	DOOR := MAIN_SLOW.mDoor,
	RAIN := MAIN_SLOW.mRain,
);
mControl(
	UP := mSecurity.QU,
	DN := mSecurity.QD,
	S_IN := mSecurity.STATUS,
	PI := mSecurity.PO,
	AI := mSecurity.AO,
);

qUp := mControl.MU;
qDown := mControl.MD;
qStatus := mControl.STATUS;
qPosition := mControl.POS;
qAngle := mControl.ANG;
END_FUNCTION_BLOCK
