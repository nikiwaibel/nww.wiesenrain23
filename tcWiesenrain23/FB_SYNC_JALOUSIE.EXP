
(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/FBs' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FB_SYNC_JALOUSIE
VAR_INPUT
	IN: BOOL;
	nextZeroVoltage: T_DCTIME;
END_VAR
VAR_OUTPUT
	Q AT %Q*: BOOL;
END_VAR
VAR
	fbGETCURTASKINDEX: GETCURTASKINDEX;
	nextZeroVoltageLast: T_DCTIME;
	TON_FAILURE: TON;
	udiLastOnlineChangeCount: UDINT;
	multi: T_DCTIME;
	ui64Add1: T_ULARGE_INTEGER;
	tHalfCylceTime: T_DCTIME;
	ui64Sub1: T_ULARGE_INTEGER;
	ui64Cmp1: T_ULARGE_INTEGER;
	diResultAdd: DINT;
	diResultSub: DINT;
	tCylceTime: T_DCTIME;
END_VAR
(* @END_DECLARATION := '0' *)
TON_FAILURE(IN := nextZeroVoltage.dwLowPart = nextZeroVoltageLast.dwLowPart, PT := t#100ms);
nextZeroVoltageLast.dwLowPart := nextZeroVoltage.dwLowPart;
IF IN AND NOT Q AND NOT TON_FAILURE.Q THEN
	fbGETCURTASKINDEX(index => );
	tCylceTime.dwLowPart := SYSTEMTASKINFOARR[fbGETCURTASKINDEX.index].cycleTime * 100;
	tCylceTime.dwHighPart := 0;
	tHalfCylceTime.dwLowPart := tCylceTime.dwLowPart / 2;
	ui64Add1 := UInt64Add64(UInt64Sub64(nextZeroVoltage, multi), tHalfCylceTime);
	ui64Sub1 := UInt64Sub64(UInt64Sub64(nextZeroVoltage, multi), tHalfCylceTime);
	ui64Cmp1 := F_GetActualDcTime();
	diResultAdd := UInt64Cmp64(ui64Cmp1, ui64Add1);
	diResultSub := UInt64Cmp64(ui64Cmp1, ui64Sub1);
	IF (diResultSub >= 0) AND (diResultAdd <= 0) THEN
		Q := TRUE;
	END_IF
END_IF
IF NOT IN AND Q AND NOT TON_FAILURE.Q THEN
	fbGETCURTASKINDEX(index => );
	tCylceTime.dwLowPart := SYSTEMTASKINFOARR[fbGETCURTASKINDEX.index].cycleTime * 100;
	tCylceTime.dwHighPart := 0;
	tHalfCylceTime.dwLowPart := tCylceTime.dwLowPart / 2;
	ui64Add1 := UInt64Add64(UInt64Sub64(nextZeroVoltage, multi), tHalfCylceTime);
	ui64Sub1 := UInt64Sub64(UInt64Sub64(nextZeroVoltage, multi), tHalfCylceTime);
	ui64Cmp1 := F_GetActualDcTime();
	diResultAdd := UInt64Cmp64(ui64Cmp1, ui64Add1);
	diResultSub := UInt64Cmp64(ui64Cmp1, ui64Sub1);
	IF (diResultSub >= 0) AND (diResultAdd <= 0)THEN
		Q := FALSE;
	END_IF
END_IF
END_FUNCTION_BLOCK
